From 8d4b7974bafa0a456e4d38d0c5825a0752098cca Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 29 May 2015 01:08:37 -0400
Subject: [PATCH] Plugin isolation


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index e52d0d4..c8a829e 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -369,6 +369,13 @@ public final class Bukkit {
     }
 
     /**
+     * Should plugins be able to access classes from other plugins that are not explicit dependencies?
+     */
+    public static boolean getIsolatePlugins() {
+        return server.getIsolatePlugins();
+    }
+
+    /**
      * Gets default ticks per animal spawns value.
      * <p>
      * <b>Example Usage:</b>
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 0e1d140..ba17c11 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -304,6 +304,11 @@ public interface Server extends PluginMessageRecipient {
     public boolean getWaterPushesTNT();
 
     /**
+     * Should plugins be able to access classes from other plugins that are not explicit dependencies?
+     */
+    public boolean getIsolatePlugins();
+
+    /**
      * Gets default ticks per animal spawns value.
      * <p>
      * <b>Example Usage:</b>
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index e5ddef2..9cd15f4 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -5,10 +5,13 @@ import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.SetMultimap;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
@@ -16,6 +19,8 @@ import org.bukkit.Location;
 import org.bukkit.block.banner.Pattern;
 import org.bukkit.configuration.Configuration;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.java.JavaPlugin;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.util.BlockVector;
 import org.bukkit.util.Vector;
@@ -26,7 +31,9 @@ import org.bukkit.util.Vector;
 public class ConfigurationSerialization {
     public static final String SERIALIZED_TYPE_KEY = "==";
     private final Class<? extends ConfigurationSerializable> clazz;
-    private static Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<String, Class<? extends ConfigurationSerializable>>();
+    private static final Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<String, Class<? extends ConfigurationSerializable>>();
+    private static final SetMultimap<Plugin, String> pluginToAlias = HashMultimap.create();
+    private static final Map<String, Plugin> aliasToPlugin = new HashMap<String, Plugin>();
 
     static {
         registerClass(Vector.class);
@@ -205,8 +212,10 @@ public class ConfigurationSerialization {
         DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
 
         if (delegate == null) {
-            registerClass(clazz, getAlias(clazz));
-            registerClass(clazz, clazz.getName());
+            synchronized(aliases) {
+                registerClass(clazz, getAlias(clazz));
+                registerClass(clazz, clazz.getName());
+            }
         }
     }
 
@@ -219,7 +228,27 @@ public class ConfigurationSerialization {
      * @see SerializableAs
      */
     public static void registerClass(Class<? extends ConfigurationSerializable> clazz, String alias) {
-        aliases.put(alias, clazz);
+        Plugin plugin = JavaPlugin.class.isAssignableFrom(clazz) ? JavaPlugin.getProvidingPlugin(clazz) : null;
+        registerClass(clazz, alias, plugin);
+    }
+
+    /**
+     * Registers the given alias to the specified {@link
+     * ConfigurationSerializable} class
+     *
+     * @param clazz Class to register
+     * @param alias Alias to register as
+     * @param plugin Plugin that will own the registration
+     * @see SerializableAs
+     */
+    public static void registerClass(Class<? extends ConfigurationSerializable> clazz, String alias, Plugin plugin) {
+        synchronized(aliases) {
+            aliases.put(alias, clazz);
+            if(plugin != null) {
+                pluginToAlias.put(plugin, alias);
+                aliasToPlugin.put(alias, plugin);
+            }
+        }
     }
 
     /**
@@ -228,7 +257,11 @@ public class ConfigurationSerialization {
      * @param alias Alias to unregister
      */
     public static void unregisterClass(String alias) {
-        aliases.remove(alias);
+        synchronized(aliases) {
+            aliases.remove(alias);
+            Plugin plugin = aliasToPlugin.remove(alias);
+            if(plugin != null) pluginToAlias.remove(plugin, alias);
+        }
     }
 
     /**
@@ -238,8 +271,24 @@ public class ConfigurationSerialization {
      * @param clazz Class to unregister
      */
     public static void unregisterClass(Class<? extends ConfigurationSerializable> clazz) {
-        while (aliases.values().remove(clazz)) {
-            ;
+        synchronized(aliases) {
+            for(Iterator<Map.Entry<String, Class<? extends ConfigurationSerializable>>> iterator = aliases.entrySet().iterator(); iterator.hasNext(); ) {
+                Map.Entry<String, Class<? extends ConfigurationSerializable>> entry = iterator.next();
+                if(clazz.equals(entry.getValue())) {
+                    iterator.remove();
+                    Plugin plugin = aliasToPlugin.remove(entry.getKey());
+                    if(plugin != null) pluginToAlias.remove(plugin, entry.getKey());
+                }
+            }
+        }
+    }
+
+    public static void unregisterAll(Plugin plugin) {
+        synchronized(aliases) {
+            for(String alias : pluginToAlias.removeAll(plugin)) {
+                aliases.remove(alias);
+                aliasToPlugin.remove(alias);
+            }
         }
     }
 
@@ -251,7 +300,9 @@ public class ConfigurationSerialization {
      * @return Registered class, or null if not found
      */
     public static Class<? extends ConfigurationSerializable> getClassByAlias(String alias) {
-        return aliases.get(alias);
+        synchronized(aliases) {
+            return aliases.get(alias);
+        }
     }
 
     /**
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index dc71961..89b40f2 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -23,6 +23,7 @@ import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.PluginCommandYamlParser;
 import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.HandlerList;
@@ -461,6 +462,12 @@ public final class SimplePluginManager implements PluginManager {
             } catch(Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while unregistering plugin channels for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
+
+            try {
+                ConfigurationSerialization.unregisterAll(plugin);
+            } catch (Throwable ex) {
+                server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while unregistering serializables " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
+            }
         }
     }
 
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 885f8ae..6cb69ba 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -9,10 +9,12 @@ import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.List;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.logging.Level;
@@ -22,8 +24,6 @@ import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.Warning;
 import org.bukkit.Warning.WarningState;
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.EventHandler;
@@ -48,8 +48,8 @@ import org.yaml.snakeyaml.error.YAMLException;
 public final class JavaPluginLoader implements PluginLoader {
     final Server server;
     private final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
-    private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
-    private final List<PluginClassLoader> loaders = new CopyOnWriteArrayList<PluginClassLoader>();
+    final Map<String, PluginClassLoader> loaders = new LinkedHashMap<String, PluginClassLoader>();
+    final ReadWriteLock loaderLock = new ReentrantReadWriteLock();
 
     /**
      * This class was not meant to be constructed explicitly
@@ -114,26 +114,50 @@ public final class JavaPluginLoader implements PluginLoader {
             ));
         }
 
-        for (final String pluginName : description.getDepend()) {
-            Plugin current = server.getPluginManager().getPlugin(pluginName);
+        Set<PluginClassLoader> dependencies = new LinkedHashSet<PluginClassLoader>();
+        loaderLock.readLock().lock();
+        try {
+            for (final String pluginName : description.getDepend()) {
+                PluginClassLoader current = loaders.get(pluginName);
+
+                if (current == null) {
+                    throw new UnknownDependencyException(pluginName);
+                }
+                dependencies.add(current);
+            }
 
-            if (current == null) {
-                throw new UnknownDependencyException(pluginName);
+            for (final String pluginName : description.getSoftDepend()) {
+                PluginClassLoader current = loaders.get(pluginName);
+                if (current != null) {
+                    dependencies.add(current);
+                }
             }
+        } finally {
+            loaderLock.readLock().unlock();
         }
 
         final PluginClassLoader loader;
         try {
-            loader = new PluginClassLoader(this, getClass().getClassLoader(), description, dataFolder, file);
-        } catch (InvalidPluginException ex) {
-            throw ex;
+            loader = new PluginClassLoader(this, getClass().getClassLoader(), dependencies, description, dataFolder, file);
         } catch (Throwable ex) {
             throw new InvalidPluginException(ex);
         }
 
-        loaders.add(loader);
+        loaderLock.writeLock().lock();
+        try {
+            loaders.put(description.getName(), loader);
+        }
+        finally {
+            loaderLock.writeLock().unlock();
+        }
 
-        return loader.plugin;
+        try {
+            return loader.createPlugin();
+        } catch (InvalidPluginException ex) {
+            throw ex;
+        } catch (Throwable ex) {
+            throw new InvalidPluginException(ex);
+        }
     }
 
     public PluginDescriptionFile getPluginDescription(File file) throws InvalidDescriptionException {
@@ -178,49 +202,6 @@ public final class JavaPluginLoader implements PluginLoader {
         return fileFilters.clone();
     }
 
-    Class<?> getClassByName(final String name) {
-        Class<?> cachedClass = classes.get(name);
-
-        if (cachedClass != null) {
-            return cachedClass;
-        } else {
-            for (PluginClassLoader loader : loaders) {
-                try {
-                    cachedClass = loader.findClass(name, false);
-                } catch (ClassNotFoundException cnfe) {}
-                if (cachedClass != null) {
-                    return cachedClass;
-                }
-            }
-        }
-        return null;
-    }
-
-    void setClass(final String name, final Class<?> clazz) {
-        if (!classes.containsKey(name)) {
-            classes.put(name, clazz);
-
-            if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
-                Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
-                ConfigurationSerialization.registerClass(serializable);
-            }
-        }
-    }
-
-    private void removeClass(String name) {
-        Class<?> clazz = classes.remove(name);
-
-        try {
-            if ((clazz != null) && (ConfigurationSerializable.class.isAssignableFrom(clazz))) {
-                Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
-                ConfigurationSerialization.unregisterClass(serializable);
-            }
-        } catch (NullPointerException ex) {
-            // Boggle!
-            // (Native methods throwing NPEs is not fun when you can't stop it before-hand)
-        }
-    }
-
     public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(Listener listener, final Plugin plugin) {
         Validate.notNull(plugin, "Plugin can not be null");
         Validate.notNull(listener, "Listener can not be null");
@@ -318,11 +299,15 @@ public final class JavaPluginLoader implements PluginLoader {
 
             JavaPlugin jPlugin = (JavaPlugin) plugin;
 
-            PluginClassLoader pluginLoader = (PluginClassLoader) jPlugin.getClassLoader();
+            String pluginName = jPlugin.getDescription().getName();
 
-            if (!loaders.contains(pluginLoader)) {
-                loaders.add(pluginLoader);
-                server.getLogger().log(Level.WARNING, "Enabled plugin with unregistered PluginClassLoader " + plugin.getDescription().getFullName());
+            loaderLock.writeLock().lock();
+            try {
+                if (!loaders.containsKey(pluginName)) {
+                    loaders.put(pluginName, (PluginClassLoader) jPlugin.getClassLoader());
+                }
+            } finally {
+                loaderLock.writeLock().unlock();
             }
 
             try {
@@ -355,14 +340,21 @@ public final class JavaPluginLoader implements PluginLoader {
                 server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
-            if (cloader instanceof PluginClassLoader) {
-                PluginClassLoader loader = (PluginClassLoader) cloader;
-                loaders.remove(loader);
-
-                Set<String> names = loader.getClasses();
+            loaderLock.writeLock().lock();
+            try {
+                loaders.remove(jPlugin.getDescription().getName());
+            } finally {
+                loaderLock.writeLock().unlock();
+            }
 
-                for (String name : names) {
-                    removeClass(name);
+            if (cloader instanceof PluginClassLoader) {
+                loaderLock.readLock().lock();
+                try {
+                    for(PluginClassLoader other : loaders.values()) {
+                        other.removeDependency((PluginClassLoader) cloader);
+                    }
+                } finally {
+                    loaderLock.readLock().unlock();
                 }
             }
         }
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 13f8633..4e94cc8 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -4,11 +4,13 @@ import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.LinkedHashSet;
 import java.util.Set;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.Bukkit;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
 
@@ -16,28 +18,42 @@ import org.bukkit.plugin.PluginDescriptionFile;
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
  */
 final class PluginClassLoader extends URLClassLoader {
-    private final JavaPluginLoader loader;
-    private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
+    private final JavaPluginLoader pluginLoader;
+    private final Set<PluginClassLoader> dependencies;
+    private final Set<PluginClassLoader> linearizedDependencies = new LinkedHashSet<PluginClassLoader>();
+    private final ReadWriteLock dependencyLock = new ReentrantReadWriteLock();
     private final PluginDescriptionFile description;
     private final File dataFolder;
     private final File file;
-    final JavaPlugin plugin;
-    private JavaPlugin pluginInit;
-    private IllegalStateException pluginState;
+    private final boolean isolate;
+    JavaPlugin plugin;
 
-    PluginClassLoader(final JavaPluginLoader loader, final ClassLoader parent, final PluginDescriptionFile description, final File dataFolder, final File file) throws InvalidPluginException, MalformedURLException {
+    static {
+        registerAsParallelCapable();
+    }
+
+    PluginClassLoader(final JavaPluginLoader pluginLoader, final ClassLoader parent, final Set<PluginClassLoader> dependencies, final PluginDescriptionFile description, final File dataFolder, final File file) throws MalformedURLException {
         super(new URL[] {file.toURI().toURL()}, parent);
-        Validate.notNull(loader, "Loader cannot be null");
+        Validate.notNull(pluginLoader, "Loader cannot be null");
+        Validate.notNull(parent, "Parent loader cannot be null");
 
-        this.loader = loader;
+        this.pluginLoader = pluginLoader;
         this.description = description;
         this.dataFolder = dataFolder;
         this.file = file;
 
+        this.dependencies = dependencies;
+        linearizeDependencies();
+
+        this.isolate = Bukkit.getIsolatePlugins();
+    }
+
+    JavaPlugin createPlugin() throws InvalidPluginException {
+        Validate.isTrue(plugin == null, "Plugin already created");
         try {
             Class<?> jarClass;
             try {
-                jarClass = Class.forName(description.getMain(), true, this);
+                jarClass = loadLocalClass(description.getMain(), true);
             } catch (ClassNotFoundException ex) {
                 throw new InvalidPluginException("Cannot find main class `" + description.getMain() + "'", ex);
             }
@@ -50,6 +66,7 @@ final class PluginClassLoader extends URLClassLoader {
             }
 
             plugin = pluginClass.newInstance();
+            return plugin;
         } catch (IllegalAccessException ex) {
             throw new InvalidPluginException("No public constructor", ex);
         } catch (InstantiationException ex) {
@@ -57,50 +74,118 @@ final class PluginClassLoader extends URLClassLoader {
         }
     }
 
-    @Override
-    protected Class<?> findClass(String name) throws ClassNotFoundException {
-        return findClass(name, true);
+    /**
+     * Flatten the dependency tree using a depth-first tree walk
+     */
+    private void linearizeDependencies() {
+        linearizedDependencies.clear();
+        linearizedDependencies.add(this);
+        for(PluginClassLoader dependency : dependencies) {
+            linearizedDependencies.addAll(dependency.linearizedDependencies);
+        }
     }
 
-    Class<?> findClass(String name, boolean checkGlobal) throws ClassNotFoundException {
-        if (name.startsWith("org.bukkit.") || name.startsWith("net.minecraft.")) {
-            throw new ClassNotFoundException(name);
+    /**
+     * Similar to the parent method, except it tries to find the class locally
+     * before delegating to the parent loader. The effect is that local classes
+     * are always loaded when available, even if a class with the same name is
+     * already available from the parent loader. This allows multiple plugins to
+     * use different versions of the same class.
+     */
+    @Override
+    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
+        if(isolate) {
+            // Local, dependencies, Bukkit
+            try {
+                // Search local plugin, followed by dependencies
+                return loadDependencyClass(name, resolve);
+            } catch(ClassNotFoundException e) {
+                // Search non-plugin classes (
+                return loadBukkitClass(name, resolve);
+            }
+        } else {
+            // Bukkit, all plugins in loading order
+            try {
+                return loadBukkitClass(name, resolve);
+            } catch(ClassNotFoundException e) {
+                // Search all plugins in load order
+                return loadPluginClass(name, resolve);
+            }
         }
-        Class<?> result = classes.get(name);
+    }
 
-        if (result == null) {
-            if (checkGlobal) {
-                result = loader.getClassByName(name);
+    /**
+     * Load a class from the first dependency that provides it
+     */
+    Class<?> loadDependencyClass(String name, boolean resolve) throws ClassNotFoundException {
+        dependencyLock.readLock().lock();
+        try {
+            for(PluginClassLoader dependency : linearizedDependencies) {
+                try {
+                    return dependency.loadLocalClass(name, resolve);
+                } catch(ClassNotFoundException ignored) {}
             }
+        } finally {
+            dependencyLock.readLock().unlock();
+        }
 
-            if (result == null) {
-                result = super.findClass(name);
+        throw new ClassNotFoundException(name);
+    }
 
-                if (result != null) {
-                    loader.setClass(name, result);
-                }
-            }
+    /**
+     * Load a class from this plugin
+     */
+    Class<?> loadLocalClass(String name, boolean resolve) throws ClassNotFoundException {
+        synchronized(getClassLoadingLock(name)) {
+            Class<?> cls = findLoadedClass(name);
+            if(cls == null) cls = findClass(name);
+            if(resolve) resolveClass(cls);
+            return cls;
+        }
+    }
 
-            classes.put(name, result);
+    /**
+     * Load a class from the first plugin that provides it (including this plugin), in loading order.
+     */
+    Class<?> loadPluginClass(String name, boolean resolve) throws ClassNotFoundException {
+        pluginLoader.loaderLock.readLock().lock();
+        try {
+            for(PluginClassLoader loader : pluginLoader.loaders.values()) {
+                try {
+                    return loader.loadLocalClass(name, resolve);
+                } catch(ClassNotFoundException ignored) {}
+            }
+        } finally {
+            pluginLoader.loaderLock.readLock().unlock();
         }
 
-        return result;
+        throw new ClassNotFoundException(name);
     }
 
-    Set<String> getClasses() {
-        return classes.keySet();
+    Class<?> loadBukkitClass(String name, boolean resolve) throws ClassNotFoundException {
+        Class<?> cls = getParent().loadClass(name);
+        if(resolve) resolveClass(cls);
+        return cls;
+    }
+
+    void removeDependency(PluginClassLoader dependency) {
+        dependencyLock.writeLock().lock();
+        try {
+            dependencies.remove(dependency);
+            linearizeDependencies();
+        } finally {
+            dependencyLock.writeLock().unlock();
+        }
     }
 
     synchronized void initialize(JavaPlugin javaPlugin) {
         Validate.notNull(javaPlugin, "Initializing plugin cannot be null");
         Validate.isTrue(javaPlugin.getClass().getClassLoader() == this, "Cannot initialize plugin outside of this class loader");
-        if (this.plugin != null || this.pluginInit != null) {
-            throw new IllegalArgumentException("Plugin already initialized!", pluginState);
-        }
 
-        pluginState = new IllegalStateException("Initial initialization");
-        this.pluginInit = javaPlugin;
+        if (this.plugin != null) {
+            throw new IllegalArgumentException("Plugin already initialized!");
+        }
 
-        javaPlugin.init(loader, loader.server, description, dataFolder, file, this);
+        javaPlugin.init(pluginLoader, pluginLoader.server, description, dataFolder, file, this);
     }
 }
-- 
1.9.0

